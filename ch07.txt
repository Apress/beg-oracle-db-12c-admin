Chapter 7

Page 118, Create Index Commands

CREATE UNIQUE INDEX employee_i1 ON employee(employee_ID)

CREATE INDEX automobile_i1 ON automobile(state, color)


Page 119, Create Function-Based Index Command

CREATE INDEX employee_i3 ON (salary + bonus)


Page 120, Listing 7-1

EXEC DBMS_ADVISOR.QUICK_TUNE(DBMS_ADVISOR.SQLACCESS_ADVISOR, 'QUICK_TUNE',
'SELECT * FROM employees WHERE UPPER(last_name)=''DE HAAN''');

SELECT DBMS_ADVISOR.GET_TASK_SCRIPT('QUICK_TUNE') FROM dual;


Page 122, Listing 7-2

CREATE TABLE sales
(
  item# INTEGER,
  quantity INTEGER,
  store_name VARCHAR(30),
  state_code VARCHAR(2),
  sale_date DATE
)
PARTITION BY LIST (state_code)
(
  PARTITION california VALUES ('CA'),
  PARTITION oregon VALUES ('OR'),
  PARTITION washington VALUES ('WA')
);


Page 123, Listing 7-3

CREATE TABLE sales
(
  item# INTEGER,
  quantity INTEGER,
  store_name VARCHAR(30),
  state_code VARCHAR(2),
  sale_date DATE
)
PARTITION BY RANGE (sale_date)
(
  PARTITION olddata VALUES LESS THAN (TO_DATE('01-JAN-2008','DD-MON-YYYY')),
  PARTITION jan2008 VALUES LESS THAN (TO_DATE('01-FEB-2008','DD-MON-YYYY')),
  PARTITION feb2008 VALUES LESS THAN (TO_DATE('01-MAR-2008','DD-MON-YYYY')),
  PARTITION mar2008 VALUES LESS THAN (TO_DATE('01-APR-2008','DD-MON-YYYY')),
  PARTITION apr2008 VALUES LESS THAN (TO_DATE('01-MAY-2008','DD-MON-YYYY')),
  PARTITION may2008 VALUES LESS THAN (TO_DATE('01-JUN-2008','DD-MON-YYYY')),
  PARTITION jun2008 VALUES LESS THAN (TO_DATE('01-JUL-2008','DD-MON-YYYY')),
  PARTITION jul2008 VALUES LESS THAN (TO_DATE('01-AUG-2008','DD-MON-YYYY')),
  PARTITION aug2008 VALUES LESS THAN (TO_DATE('01-SEP-2008','DD-MON-YYYY')),
  PARTITION sep2008 VALUES LESS THAN (TO_DATE('01-OCT-2008','DD-MON-YYYY')),
  PARTITION oct2008 VALUES LESS THAN (TO_DATE('01-NOV-2008','DD-MON-YYYY')),
  PARTITION nov2008 VALUES LESS THAN (TO_DATE('01-DEC-2008','DD-MON-YYYY')),
  PARTITION dec2008 VALUES LESS THAN (TO_DATE('01-JAN-2009','DD-MON-YYYY'))
);


Page 124, Listing 7-4

CREATE TABLE sales
(
  item# INTEGER,
  quantity INTEGER,
  store_name VARCHAR(30),
  state_code VARCHAR(2),
  sale_date DATE
)
PARTITION BY RANGE (sale_date)
INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
(
  PARTITION olddata VALUES LESS THAN (TO_DATE('01-JAN-2008','DD-MON-YYYY'))
);


Page 124, Listing 7-5

CREATE TABLE sales
(
  item# INTEGER,
  quantity INTEGER,
  store_name VARCHAR(30),
  state_code VARCHAR(2),
  sale_date DATE
)
  PARTITION BY HASH (sale_date)
  PARTITIONS 4
  STORE IN (data1, data2, data3, data4);
  
  
Page 125, Listing 7-6

CREATE TABLE Orders
(
  PONo NUMBER(5),
  Custno NUMBER(3),
  OrderDate DATE,
  ShipDate DATE,
  ToStreet VARCHAR2(20),
  ToCity VARCHAR2(20),
  ToState CHAR(2),
  ToZip VARCHAR2(10),
  CONSTRAINT Orders_PK PRIMARY KEY (PONo),
  CONSTRAINT Orders_FK1 FOREIGN KEY (CustNo) REFERENCES Customers
)
PARTITION BY RANGE (OrderDate)
(
  PARTITION olddata VALUES LESS THAN (TO_DATE('01-JAN-2008','DD-MON-YYYY')),
  PARTITION jan2008 VALUES LESS THAN (TO_DATE('01-FEB-2008','DD-MON-YYYY')),
  PARTITION feb2008 VALUES LESS THAN (TO_DATE('01-MAR-2008','DD-MON-YYYY')),
  PARTITION mar2008 VALUES LESS THAN (TO_DATE('01-APR-2008','DD-MON-YYYY')),
  PARTITION apr2008 VALUES LESS THAN (TO_DATE('01-MAY-2008','DD-MON-YYYY')),
  PARTITION may2008 VALUES LESS THAN (TO_DATE('01-JUN-2008','DD-MON-YYYY')),
  PARTITION jun2008 VALUES LESS THAN (TO_DATE('01-JUL-2008','DD-MON-YYYY')),
  PARTITION jul2008 VALUES LESS THAN (TO_DATE('01-AUG-2008','DD-MON-YYYY')),
  PARTITION aug2008 VALUES LESS THAN (TO_DATE('01-SEP-2008','DD-MON-YYYY')),
  PARTITION sep2008 VALUES LESS THAN (TO_DATE('01-OCT-2008','DD-MON-YYYY')),
  PARTITION oct2008 VALUES LESS THAN (TO_DATE('01-NOV-2008','DD-MON-YYYY')),
  PARTITION nov2008 VALUES LESS THAN (TO_DATE('01-DEC-2008','DD-MON-YYYY')),
  PARTITION dec2008 VALUES LESS THAN (TO_DATE('01-JAN-2009','DD-MON-YYYY'))
);
CREATE TABLE LineItems
(
  LineNo NUMBER(2),
  PONo NUMBER(5) NOT NULL,
  StockNo NUMBER(4),
  Quantity NUMBER(2),
  Discount NUMBER(4,2),
  CONSTRAINT LineItems_PK PRIMARY KEY (LineNo, PONo),
  CONSTRAINT LineItems_FK1 FOREIGN KEY (PONo) REFERENCES Orders,
  CONSTRAINT LineItems_FK2 FOREIGN KEY (StockNo) REFERENCES StockItems
)
PARTITION BY REFERENCE (LineItems_FK1);


Page 126, Listing 7-6

CREATE TABLE sales
(
  item# INTEGER,
  quantity INTEGER,
  store_name VARCHAR(30),
  state_code VARCHAR(2),
  sale_date DATE
)
PARTITION BY RANGE (sale_date)
INTERVAL(NUMTOYMINTERVAL(1, 'MONTH'))
SUBPARTITION BY list (state_code)
(
  PARTITION olddata VALUES LESS THAN (TO_DATE('01-JAN-2008','DD-MON-YYYY'))
  (
    SUBPARTITION california VALUES ('CA'),
    SUBPARTITION oregon VALUES ('OR'),
    SUBPARTITION washington VALUES ('WA')
  )
);


Page 127, Sales Table in Five Dimensions

CREATE TABLE SALES
(
  -- dimensions
  PROD_ID NUMBER NOT NULL,
  CUST_ID NUMBER NOT NULL,
  TIME_ID DATE NOT ENABLE,
  CHANNEL_ID NUMBER NOT NULL,
  PROMO_ID NUMBER NOT NULL,
  -- measurements
  QUANTITY_SOLD NUMBER(10,2) NOT NULL,
  AMOUNT_SOLD NUMBER(10,2) NOT NULL,
  -- constraints
  CONSTRAINT SALES_CHANNEL_FK FOREIGN KEY (CHANNEL_ID) REFERENCES SH.CHANNELS (CHANNEL_ID),
  CONSTRAINT SALES_TIME_FK FOREIGN KEY (TIME_ID) REFERENCES SH.TIMES (TIME_ID),
  CONSTRAINT SALES_PRODUCT_FK FOREIGN KEY (PROD_ID) REFERENCES SH.PRODUCTS (PROD_ID),
  CONSTRAINT SALES_CUSTOMER_FK FOREIGN KEY (CUST_ID) REFERENCES SH.CUSTOMERS (CUST_ID),
  CONSTRAINT SALES_PROMO_FK FOREIGN KEY (PROMO_ID) REFERENCES SH.PROMOTIONS (PROMO_ID)
)
-- partition by the time dimension
PARTITION BY RANGE (TIME_ID)
(
  -- annual partitions for 1995 and 1996
  PARTITION SALES_1995 VALUES LESS THAN '1996-01-01',
  PARTITION SALES_1996 VALUES LESS THAN '1997-01-01',
  -- semi-annual partitions for 1997
  PARTITION SALES_H1_1997 VALUES LESS THAN '1997-07-01',
  PARTITION SALES_H2_1997 VALUES LESS THAN '1998-01-01',
  -- quarterly partitions for 1998
  PARTITION SALES_Q1_1998 VALUES LESS THAN '1998-04-01',
  PARTITION SALES_Q2_1998 VALUES LESS THAN '1998-07-01',
  PARTITION SALES_Q3_1998 VALUES LESS THAN '1998-10-01',
  PARTITION SALES_Q4_1998 VALUES LESS THAN '1999-01-01',
  --
  --intervening sections for 1999, 2000, 2001, and 2002 not shown in book
  --I have tried to recreate them, and hope that I have them all correct
  --
  PARTITION SALES_Q1_1999 VALUES LESS THAN '1999-04-01',
  PARTITION SALES_Q2_1999 VALUES LESS THAN '1999-07-01',
  PARTITION SALES_Q3_1999 VALUES LESS THAN '1999-10-01',
  PARTITION SALES_Q4_1999 VALUES LESS THAN '1999-01-01',
  PARTITION SALES_Q1_2000 VALUES LESS THAN '2000-04-01',
  PARTITION SALES_Q2_2000 VALUES LESS THAN '2000-07-01',
  PARTITION SALES_Q3_2000 VALUES LESS THAN '2000-10-01',
  PARTITION SALES_Q4_2000 VALUES LESS THAN '2000-01-01',
  PARTITION SALES_Q1_2001 VALUES LESS THAN '2001-04-01',
  PARTITION SALES_Q2_2001 VALUES LESS THAN '2001-07-01',
  PARTITION SALES_Q3_2001 VALUES LESS THAN '2001-10-01',
  PARTITION SALES_Q4_2001 VALUES LESS THAN '2001-01-01',
  PARTITION SALES_Q1_2002 VALUES LESS THAN '2002-04-01',
  PARTITION SALES_Q2_2002 VALUES LESS THAN '2002-07-01',
  PARTITION SALES_Q3_2002 VALUES LESS THAN '2002-10-01',
  PARTITION SALES_Q4_2002 VALUES LESS THAN '2002-01-01',
  -- quarterly partitions for 2003
  PARTITION SALES_Q1_2003 VALUES LESS THAN '2003-04-01',
  PARTITION SALES_Q2_2003 VALUES LESS THAN '2003-07-01',
  PARTITION SALES_Q3_2003 VALUES LESS THAN '2003-10-01',
  PARTITION SALES_Q4_2003 VALUES LESS THAN '2004-01-01'
  );
  
  
Page 128, Create Bitmapped Indexes
  
CREATE BITMAP INDEX SALES_CHANNEL_BIX ON SALES (CHANNEL_ID) LOCAL;
CREATE BITMAP INDEX SALES_CUST_BIX ON SALES (CUST_ID) LOCAL;
CREATE BITMAP INDEX SALES_PROD_BIX ON SALES (PROD_ID) LOCAL;
CREATE BITMAP INDEX SALES_PROMO_BIX ON SALES (PROMO_ID) LOCAL;
CREATE BITMAP INDEX SALES_TIME_BIX ON SALES (TIME_ID) LOCAL;
  

Page 128, Create four quarterly sales data tables

CREATE TABLE SALES_Q1_2003 AS
  SELECT * FROM sales PARTITION (SALES_Q1_2003) NOLOGGING;

CREATE TABLE SALES_Q2_2003 AS
  SELECT * FROM sales PARTITION (SALES_Q2_2003) NOLOGGING;

CREATE TABLE SALES_Q3_2003 AS
  SELECT * FROM sales PARTITION (SALES_Q3_2003) NOLOGGING;

CREATE TABLE SALES_Q4_2003 AS
  SELECT * FROM sales PARTITION (SALES_Q4_2003) NOLOGGING;
  
  
Page 128, Create check constraints

-- the oldest table is only bounded on one side and may contain data from prior years
ALTER TABLE SALES_1995 ADD CONSTRAINT SALES_1995_C1 CHECK
(time_id < '1996-01-01');

-- tables other than the SALES_1995 table are bounded on both sides
ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q1_1998_C1 check
(time_id >= '1998-01-01' AND time_id < '1998-04-01’);

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q2_1998_C1 check
(time_id >= '1998-04-01' AND time_id < '1998-07-01’);

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q3_1998_C1 check
(time_id >= '1998-07-01' AND time_id < '1998-10-01’);

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q4_1998_C1 check
(time_id >= '1998-10-01' AND time_id < '1999-01-01’);


Page 129, Create Bitmapped indexes

CREATE BITMAP INDEX SALES_Q1_1998_SALES_CHAN_BIX ON SALES_Q1_1998(channel_id);
CREATE BITMAP INDEX SALES_Q1_1998_SALES_CUST_BIX ON SALES_Q1_1998(cust_id);
CREATE BITMAP INDEX SALES_Q1_1998_SALES_PROD_BIX ON SALES_Q1_1998(prod_id);
CREATE BITMAP INDEX SALES_Q1_1998_SALES_PROM_BIX ON SALES_Q1_1998(promo_id);


Page 129, Add foreign key constraints

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q1_1998_CHAN_FK
FOREIGN KEY (channel_id) REFERENCES channels;

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q1_1998_CUST_FK
FOREIGN KEY (cust_id) REFERENCES customers;

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT
SALES_Q1_1998_PROD_FK FOREIGN KEY (prod_id) REFERENCES products;

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q1_1998_PROM_FK
FOREIGN KEY (promo_id) REFERENCES promotions;

ALTER TABLE SALES_Q1_1998 ADD CONSTRAINT SALES_Q1_1998_TIME_FK
FOREIGN KEY (time_id) REFERENCES times;


Page 129, Create Union View

CREATE OR REPLACE VIEW sales2 AS
SELECT * FROM SALES_1995 WHERE time_id<'1996-01-01'
UNION ALL SELECT * FROM SALES_1996 WHERE time_id >= '1996-01-01' AND time_id<'1997-01-01'
UNION ALL SELECT * FROM SALES_H1_1997 WHERE time_id>='1997-01-01' AND time_id<'1997-07-01'
UNION ALL SELECT * FROM SALES_H2_1997 WHERE time_id>='1997-07-01' AND time_id<'1998-01-01'
UNION ALL SELECT * FROM SALES_Q1_1998 WHERE time_id>='1998-01-01' AND time_id<'1998-04-01'
UNION ALL SELECT * FROM SALES_Q2_1998 WHERE time_id>='1998-04-01' AND time_id<'1998-07-01'
UNION ALL SELECT * FROM SALES_Q3_1998 WHERE time_id>='1998-07-01' AND time_id<'1998-10-01'
UNION ALL SELECT * FROM SALES_Q4_1998 WHERE time_id>='1998-10-01' AND time_id<'1999-01-01'
--
--intervening lines not shown in book
--I have tried to add them correctly to this file
--
UNION ALL SELECT * FROM SALES_Q1_1999 WHERE time_id>='1999-01-01' AND time_id<'1999-04-01'
UNION ALL SELECT * FROM SALES_Q2_1999 WHERE time_id>='1999-04-01' AND time_id<'1999-07-01'
UNION ALL SELECT * FROM SALES_Q3_1999 WHERE time_id>='1999-07-01' AND time_id<'1999-10-01'
UNION ALL SELECT * FROM SALES_Q4_1999 WHERE time_id>='1999-10-01' AND time_id<'2000-01-01'
UNION ALL SELECT * FROM SALES_Q1_2000 WHERE time_id>='2000-01-01' AND time_id<'2000-04-01'
UNION ALL SELECT * FROM SALES_Q2_2000 WHERE time_id>='2000-04-01' AND time_id<'2000-07-01'
UNION ALL SELECT * FROM SALES_Q3_2000 WHERE time_id>='2000-07-01' AND time_id<'2000-10-01'
UNION ALL SELECT * FROM SALES_Q4_2000 WHERE time_id>='2000-10-01' AND time_id<'2001-01-01'
UNION ALL SELECT * FROM SALES_Q1_2001 WHERE time_id>='2001-01-01' AND time_id<'2001-04-01'
UNION ALL SELECT * FROM SALES_Q2_2001 WHERE time_id>='2001-04-01' AND time_id<'2001-07-01'
UNION ALL SELECT * FROM SALES_Q3_2001 WHERE time_id>='2001-07-01' AND time_id<'2001-10-01'
UNION ALL SELECT * FROM SALES_Q4_2001 WHERE time_id>='2001-10-01' AND time_id<'2002-01-01'
UNION ALL SELECT * FROM SALES_Q1_2002 WHERE time_id>='2002-01-01' AND time_id<'2002-04-01'
UNION ALL SELECT * FROM SALES_Q2_2002 WHERE time_id>='2002-04-01' AND time_id<'2002-07-01'
UNION ALL SELECT * FROM SALES_Q3_2002 WHERE time_id>='2002-07-01' AND time_id<'2002-10-01'
UNION ALL SELECT * FROM SALES_Q4_2002 WHERE time_id>='2002-10-01' AND time_id<'2003-01-01'
UNION ALL SELECT * FROM SALES_Q1_2003 WHERE time_id>='2003-01-01' AND time_id<'2003-04-01'
UNION ALL SELECT * FROM SALES_Q2_2003 WHERE time_id>='2003-04-01' AND time_id<'2003-07-01'
UNION ALL SELECT * FROM SALES_Q3_2003 WHERE time_id>='2003-07-01' AND time_id<'2003-10-01'
UNION ALL SELECT * FROM SALES_Q4_2003 WHERE time_id>='2003-10-01' AND time_id<'2004-01-01';


Page 130, Listing 7-8

CREATE MATERIALIZED VIEW Orders_LineItems
REFRESH ON COMMIT
ENABLE QUERY REWRITE
AS SELECT
  -- data items from the Orders table
  Orders.PONo,
  Orders.Custno,
  Orders.OrderDate,
  Orders.ShipDate,
  Orders.ToStreet,
  Orders.ToCity,
  Orders.ToState,
  Orders.ToZip,
  -- data items from the LineItems table
  LineItems.LineNo,
  LineItems.StockNo,
  LineItems.Quantity,
  LineItems.Discount
FROM Orders, LineItems
WHERE LineItems.PONo = Orders.PONo;


Page 131, Listing 7-9

CREATE CLUSTER Orders_LineItems (PONo NUMBER(5))
HASHKEYS 10000 SIZE 2048;

CREATE TABLE Orders
(
PONo NUMBER(5),
Custno NUMBER(3),
OrderDate DATE,
ShipDate DATE,
ToStreet VARCHAR2(20),
ToCity VARCHAR2(20),
ToState CHAR(2),
ToZip VARCHAR2(10),
CONSTRAINT Orders_PK PRIMARY KEY (PONo),
CONSTRAINT Orders_FK1 FOREIGN KEY (CustNo) REFERENCES Customers
)
CLUSTER Orders_LineItems (PONo);
CREATE TABLE LineItems
(
LineNo NUMBER(2),
PONo NUMBER(5) NOT NULL,
StockNo NUMBER(4),
Quantity NUMBER(2),
Discount NUMBER(4,2),
CONSTRAINT LineItems_PK PRIMARY KEY (LineNo, PONo),
CONSTRAINT LineItems_FK1 FOREIGN KEY (PONo) REFERENCES Orders,
CONSTRAINT LineItems_FK2 FOREIGN KEY (StockNo) REFERENCES StockItems
)
CLUSTER Orders_LineItems (PONo);

